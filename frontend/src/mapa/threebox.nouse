<template>
    
        <div v-if="loaded">
                <pontejk></pontejk>
                <catedral></catedral>
                <congresso></congresso>
                <torretv></torretv>
                <torredigital></torredigital>
                <caixa></caixa>
                <arvores></arvores> 
                <barragem></barragem> 
                <barcos></barcos> 
                <!-- <course-threebox></course-threebox> -->
        </div>

</template>


<script>
export default {


    props:['map'],

    threebox:null,

    data:function(){
                return {
                    loaded:false,
                    lightPosition:[ -0.5, -1, 0.55 ]
                }
    },

    computed:{
        threebox:function(){
                        return this.$options.threebox
        },
    },

    watch:{
           lightPosition:function(v){

                     this.light.position.set( v[0],v[1],v[2] );

            },
    },

    mounted:function(){
        this.startThreeBox();
    },

    methods:{

        startThreeBox:function(){

               
                        var threebox = new Threebox(this.map);
                        this.$options.threebox = threebox;
                        window.TB = threebox;
                        window.tbox = threebox;
                        window.threebox = threebox;
     
                        // threebox.setupDefaultLights();
                         threebox.scene.add( new THREE.AmbientLight( 0xb372be, 0.85 ) );
                        // var sunlight = new THREE.DirectionalLight(0xffffff, 0.5);
                        // sunlight.position.set(0,800,1000);
                        // sunlight.matrixWorldNeedsUpdate = true;
                        // threebox.world.add(sunlight);


                        this.light = new THREE.DirectionalLight( 0xf4ad5a, 0.7);
                        
                        var v = this.lightPosition;
                        this.light.position.set( v[0],v[1],v[2]); 
                        this.light.castShadow = false;            // default false

                         this.light.position.set(5, 0, 5);
                         this.light.target.position.set(0, 0, 0);
                        
                         this.light.castShadow = false;
                         this.light.shadowDarkness = 0.5;
                        
                         this.light.shadowCameraNear = 0;
                         this.light.shadowCameraFar = 15;
                        
                         this.light.shadowCameraLeft = -5;
                         this.light.shadowCameraRight = 5;
                         this.light.shadowCameraTop = 5;
                         this.light.shadowCameraBottom = -5;

                        window.light = this.light;


                        //Set up shadow properties for the light
                        light.shadow.mapSize.width = 112;  // default
                        light.shadow.mapSize.height = 112; // default
                        light.shadow.camera.near = 0.5;    // default
                        light.shadow.camera.far = 500;     // default

                        threebox.scene.add( light );



                        var light2 = new THREE.DirectionalLight( 0xfffbcb, 0.5);
                        light2.position.set( -0.8, 1, 0.85 ); 
                        threebox.scene.add( light2 );


                        // var geometry = new THREE.PlaneGeometry(1000*2, 1000*2, 1);
                        // geometry.receiveShadow = true;
                        // geometry.castShadow = true;
                        // var material = new THREE.MeshBasicMaterial( {color: 0x444444, side: THREE.DoubleSide});
                        // material.wireframe = true;
                        // var plane = new THREE.Mesh(geometry, material);


                        // var geometry2 = new THREE.PlaneGeometry(1000*1, 1000*1, 1);
                        // var plane2 = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial( {color: 0x444444, side: THREE.DoubleSide}));

                        // threebox.addAtCoordinate(plane, [-47.829767106423844,-15.825223882879229,0], {scaleToLatitude:true});
                        // threebox.addAtCoordinate(plane, [-47.829767106423844,-15.825223882879229,10], {scaleToLatitude:true});


                //         var gson =  {
                //             "type": "FeatureCollection",
                //             "features": [{
                //                 "type": "Feature",
                //                 "geometry": {
                //                     "type": "Point",
                //                     "coordinates": [-47.829767106423844,-15.825223882879229,0]
                //                 },
                //                 "properties":{
                //                     key:"pontejk",
                //                     scale:[5,5,5],
                //                     rotation:[90,0,207,'ZXY'],
                //                     model:"pontejk"
                //                 }
                //             } ]
                // }

                //         var symbols = threebox.addSymbolLayer({
                //             id:             "scale",
                //             source:         gson, // You can also specify a URL or relative path such as "data/points.geojson",
                //             modelName:      {property: 'model'},    // will look for an .obj and .mtl file with this name
                //             modelDirectory: "/models3d/",          // in this directory
                //             rotation:       { generator: feature => (new THREE.Euler(0,0,0, "ZXY")) },
                //             scale:          {property: 'scale'},
                //             rotation:       { generator: feature => new THREE.Euler(_.degToRad(feature.properties.rotation[0]),_.degToRad(feature.properties.rotation[1]),_.degToRad(feature.properties.rotation[2]),feature.properties.rotation[3]) },
                //             scaleWithMapProjection: true
                //         });

                        this.loaded = true;
                   

        }
    }


}
</script>

<style>

</style>
