import lineDistance from"@turf/length";import distance from"@turf/distance";function sum(a){for(var s=0,i=0;i<a.length;i++)s+=a[i];return s}function variance(array){var mean=avg(array);return avg(array.map(function(num){return Math.pow(num-mean,2)}))}function standardDeviation(array){return Math.sqrt(variance(array))}function degToRad(a){return Math.PI/180*a}function meanAngleDeg(a){return 180/Math.PI*Math.atan2(sum(a.map(degToRad).map(Math.sin))/a.length,sum(a.map(degToRad).map(Math.cos))/a.length)}var avg=function(array){return sum(array)/array.length};export default function(GeoJson){if("LineString"!=_.get(GeoJson,"geometry.type",""))return!1;var distUp=0,distDown=0,slope=[],difficult=[],alt=[],pointsGeoJson=GeoJson.geometry.coordinates,courseDistance=lineDistance(GeoJson);for(let i=1;i<pointsGeoJson.length;i++){const p0=pointsGeoJson[i-1],p1=pointsGeoJson[i];var horizontalDistance=1e3*distance(p0,p1,{units:"kilometres"});if((p0[2]||p1[2])&&(p0[2]=p0[2]||p1[2],p1[2]=p1[2]||p0[2]),p1[2]){var verticalDistance=p1[2]-p0[2];verticalDistance>0?distUp+=horizontalDistance:distDown+=horizontalDistance,alt.push(p0[2]),slope.push(Math.atan2(verticalDistance,horizontalDistance)*(180/Math.PI)),difficult.push(hikeDiff(horizontalDistance,verticalDistance))}}function hikeDiff(dist,gain){var diff=(gain/(5280*dist)*100*5.5+Math.sqrt(dist*dist*6))/2.5;return 0==gain?0:diff}slope=_.remove(slope,n=>!1===_.isNaN(n)&&0!==n);var difficultSum,difficultavg=(difficult=_.remove(difficult,n=>!1===_.isNaN(n))).reduce(function(a,b){return a+b})/difficult.length,slopeStdDev=standardDeviation(slope);return{dificult:hikeDiff(courseDistance,distUp-distDown),dist_up:distUp,dist_down:distDown,max_slope:avg(slope)+2*slopeStdDev,min_slope:avg(slope)-2*slopeStdDev,avg_slope:avg(slope),avg_angle:avg(slope)*(180/Math.PI),max_alt:Math.max.apply(null,alt),min_alt:Math.min.apply(null,alt),avg_alt:avg(alt),diffficult:avg(difficult)}};