/* Parse function for JavaScript. Makes use of the tokenizer from
 * tokenizejavascript.js. Note that your parsers do not have to be
 * this complicated -- if you don't want to recognize local variables,
 * in many languages it is enough to just look for braces, semicolons,
 * parentheses, etc, and know when you are inside a string or comment.
 *
 * See manual.html for more info about the parser interface.
 */var JSParser=Editor.Parser=function(){function n(e,t,n,r,i,s){this.indented=e;this.column=t;this.type=n;r!=null&&(this.align=r);this.prev=i;this.info=s}function r(e){return function(t){var n=t&&t.charAt(0),r=e.type,i=n==r;return r=="vardef"?e.indented+4:r=="form"&&n=="{"?e.indented:r=="stat"||r=="form"?e.indented+indentUnit:e.info=="switch"&&!i?e.indented+(/^(?:case|default)\b/.test(t)?indentUnit:2*indentUnit):e.align?e.column-(i?1:0):e.indented+(i?0:indentUnit)}}function i(i,s){function v(){while(u[u.length-1].lex)u.pop()();var e=o.next();e.type=="whitespace"&&l==0&&(c=e.value.length);l+=e.value.length;if(e.content=="\n"){c=l=0;"align"in f||(f.align=!1);e.indentation=r(f)}if(e.type=="whitespace"||e.type=="comment")return e;"align"in f||(f.align=!0);for(;;){h=p=!1;u.pop()(e.type,e.content);if(h){p?e.style=p:e.type=="variable"&&T(e.content)&&(e.style="js-localvariable");return e}}}function m(){var e=a,t=f,n=u.concat([]),r=o.state;return function(s){a=e;f=t;u=n.concat([]);l=c=0;o=tokenizeJavaScript(s,r);return d}}function g(e){for(var t=e.length-1;t>=0;t--)u.push(e[t])}function y(){g(arguments);h=!0}function b(){g(arguments);h=!1}function w(e){p=e}function E(){a={prev:a,vars:{"this":!0,arguments:!0}}}function S(){a=a.prev}function x(e){if(a){w("js-variabledef");a.vars[e]=!0}}function T(e){var t=a;while(t){if(t.vars[e])return!0;t=t.prev}return!1}function N(e,t){var r=function(){f=new n(c,l,e,null,f,t)};r.lex=!0;return r}function C(){f.type==")"&&(c=f.indented);f=f.prev}function k(e){return function(n){n==e?y():e==";"?b():y(arguments.callee)}}function L(e){return b(O,L)}function A(e){return b(M,A)}function O(e){e=="var"?y(N("vardef"),F,k(";"),C):e=="keyword a"?y(N("form"),M,O,C):e=="keyword b"?y(N("form"),O,C):e=="{"?y(N("}"),j,C):e==";"?y():e=="function"?y(W):e=="for"?y(N("form"),k("("),N(")"),q,k(")"),C,O,C):e=="variable"?y(N("stat"),D):e=="switch"?y(N("form"),M,N("}","switch"),k("{"),j,C,C):e=="case"?y(M,k(":")):e=="default"?y(k(":")):e=="catch"?y(N("form"),E,k("("),X,k(")"),O,C,S):b(N("stat"),M,k(";"),C)}function M(t){e.hasOwnProperty(t)?y(_):t=="function"?y(W):t=="keyword c"?y(M):t=="("?y(N(")"),M,k(")"),C,_):t=="operator"?y(M):t=="["?y(N("]"),B(M,"]"),C,_):t=="{"?y(N("}"),B(H,"}"),C,_):y()}function _(e,t){e=="operator"&&/\+\+|--/.test(t)?y(_):e=="operator"?y(M):e==";"?b():e=="("?y(N(")"),B(M,")"),C,_):e=="."?y(P,_):e=="["&&y(N("]"),M,k("]"),C,_)}function D(e){e==":"?y(C,O):b(_,k(";"),C)}function P(e){if(e=="variable"){w("js-property");y()}}function H(t){t=="variable"&&w("js-property");e.hasOwnProperty(t)&&y(k(":"),M)}function B(e,t){function n(r){r==","?y(e,n):r==t?y():y(k(t))}return function(i){i==t?y():b(e,n)}}function j(e){e=="}"?y():b(O,j)}function F(e,t){if(e=="variable"){x(t);y(I)}else y()}function I(e,t){t=="="?y(M,I):e==","&&y(F)}function q(e){e=="var"?y(F,U):e==";"?b(U):e=="variable"?y(R):b(U)}function R(e,t){t=="in"?y(M):y(_,U)}function U(e,t){e==";"?y(z):t=="in"?y(M):y(M,k(";"),z)}function z(e){e==")"?b():y(M)}function W(e,t){if(e=="variable"){x(t);y(W)}else e=="("&&y(E,B(X,")"),O,S)}function X(e,t){if(e=="variable"){x(t);y()}}var o=tokenizeJavaScript(i),u=[t?A:L],a=null,f=new n((s||0)-indentUnit,0,"block",!1),l=0,c=0,h,p,d={next:v,copy:m};C.lex=!0;return d}var e={atom:!0,number:!0,variable:!0,string:!0,regexp:!0},t=!1;return{make:i,electricChars:"{}:",configure:function(e){e.json!=null&&(t=e.json)}}}();