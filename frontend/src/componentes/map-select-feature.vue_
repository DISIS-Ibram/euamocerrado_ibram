<template>
	<div class='d-flex flex-column'>

		<div class='hidden'>
            <i v-if='loading' class="fa fa-spinner fa-pulse fa-2x fa-fw"> </i>    
            <label> Escolha um Arquivo com sua Geometria(kml,kml,shp, etc):</label> <input ref='inputfile' type="file"  multiple @change="selecionouArquivo" />
        </div>
          <div class=' alert alert-info mb-0' style='font-size:12px'>
             <i v-if='loading' class="fa fa-spinner fa-pulse  fa-fw"> </i>   <a class='pointer' @click="$refs.inputfile.click()"> <i class="fa fa-upload" /> Enviar Arquivo </a> | Desenhe e/ou Selecione uma ou mais linhas no mapa abaixo.  
        </div>

		<div ref="mapabaselayer" class="mapaselectedfeature flex-grow-1 ">
              <!-- <parques-fillcolor />
                <parques-name /> -->
        </div>
        <div>
            <small> Aperte SHIFT para selecionar mais que um trecho </small>
        </div>

      


	</div>
</template>


<script>
// import "@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css";

import bbox from "@turf/bbox";

// import mapBaseStyle from "../mapa/styles/mapabase_style";

// var MapboxDraw = require("@mapbox/mapbox-gl-draw");
export default {
	props: {
		geoJson: {
			default: () => {
				return { type: "FeatureCollection", features: [] };
			}
		},
		accessToken: {
			default:
				"pk.eyJ1IjoibGVjZWxlcyIsImEiOiJjajUyZXBzbXEwZjYxMnFwOWFxeHd5ZDY3In0.dftZ4LdgXBkdZI0_l7pcNA"
		}
    },
    
    data(){
        return {
            myGeoJson:false,
            loading:false,
            selectedFeatures:[],
        }
    },

    watch: {
        myGeoJson:function(val){
            try{
                delete val.crs
            }catch(e){}

            this.Draw.set(val)
            // this.Draw.changeMode("direct_select")
            this.zoomFeatures();
        }
    },


	mounted() {
		this.$options.map = this.map = new mapboxgl.Map({
			container: this.$refs.mapabaselayer,
			style: {
				version: 8,
				sources: {
					"raster-tiles": {
						type: "raster",
						tiles: [
							"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"
						],
						tileSize: 256,
						attribution: '<a href="http://www.esri.com/">Esri</a>'
					}
				},
				layers: [
					{
						id: "simple-tiles",
						type: "raster",
						source: "raster-tiles",
						minzoom: 0,
						maxzoom: 20
					}
				]
			}
			// maxBounds:[-48.341307603, -16.150607329, -47.483847157, -15.495121696]
        });

        this.map.jumpTo({
            "center": _.util.inverseMercator(1865.6 / 2, 2057.6 / 2),
            "zoom": 9,
            "pitch": 0,
            "bearing": 0
        })
        
        this.Draw = new MapboxDraw({controls:{
            point:false,
            line_string:true,
            polygon:false,
            trash:true,
            combine_features:false,
            uncombine_features:false
        }});

        this.map.addControl(this.Draw, 'top-left');

        this.map.on('draw.selectionchange', this.selectionChange )
        this.map.on('draw.create', this.selectionChange )
        this.map.on('draw.delete', this.selectionChange )
    },
    

    methods:{
        selecionouArquivo:function(e){
            let filelist = e.currentTarget.files;
            this.processFiles(filelist)
        },

        processFiles:function(filelist){
                //envio os arquivos
                //processo o json
                var data = new FormData();
                for (var i = filelist.length - 1; i >= 0; i--) {
                    data.append('file_field',filelist[i])
                }
            
                // this.setState({isFetchingGeo:true})
                this.loading = true
                this.sendGeoFiles(data)
                .then((data)=> {
                    console.log(data)
                    this.myGeoJson = data  
                    this.loading = false
                },(e)=>{
                    alert("Ocorreu um erro")
                })
        },

        sendGeoFiles:function(formdata){

                //LETODO - colocar em config
                const convergeourl = window.API.convertGeoFileToGeoJson
;

                return $.ajax(
                    convergeourl,
                    { 
                        method:'POST',
                        data:formdata,
                        cache: false,
                        processData: false, // Don't process the files
                        contentType: false
                    }
                )
        },

        zoomFeatures:function(){
            let features = this.Draw.getAll()
            var bboxFeatures = bbox(features)
            console.log(bboxFeatures);
            this.map.fitBounds([[ bboxFeatures[0], bboxFeatures[1] ], [ bboxFeatures[2], bboxFeatures[3] ]]);
        },

        selectionChange:function(){
            let selectfeatures = this.Draw.getSelected()
            if(selectfeatures){
                this.$emit('input',selectfeatures)
                this.$emit('change',selectfeatures)
            }
            
            let allfeatures = this.Draw.getAll()
            this.$emit('input',features)
            this.$emit('change',features)
        },




    }
};


</script>


<style lang="stylus" scoped>
    .mapaselectedfeature {
        width: 100%;
        height:100%;
    }
</style>