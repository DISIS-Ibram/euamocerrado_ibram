var path = require('path')
var webpack = require('webpack')


// var DashboardPlugin = require('webpack-dashboard/plugin');


const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
var LodashModuleReplacementPlugin = require('lodash-webpack-plugin');

function resolve(dir) {
    return path.join(__dirname, dir)
}


loadFonts = ({ include, exclude, options } = {}) => ({
    module: {
        rules: [{
            // Capture eot, ttf, woff, and woff2
            test: /\.(eot|ttf|woff|woff2)(\?v=\d+\.\d+\.\d+)?$/,
            include,
            exclude,

            use: {
                loader: 'file-loader',
                options,
            },
        }, ],
    },
});


module.exports = {
    entry: './src/main.js',
    output: {
        path: path.resolve(__dirname, './dist'),
        publicPath: '/dist/',
        filename: 'build.js'
    },

    externals: ['window', 'TweenMax','vtl'],

    //para resolver https://github.com/mapbox/mapbox-gl-js/issues/1649
    node: {
        fs: 'empty'
      },

    module: {
        rules: [{
                test: /\.vue$/,
                loader: 'vue-loader',
                options: {
                    loaders: {
                        stylus: 'vue-style-loader!css-loader!stylus-loader',
                        js: 'babel-loader'
                    }
                    // other vue-loader options go here
                }
            },

            { test: /jquery-mousewheel/, loader: "imports?define=>false&this=>window" },
            { test: /malihu-custom-scrollbar-plugin/, loader: "imports?define=>false&this=>window" },

            {
                test: /\.css$/,
                use: [{
                        loader: "style-loader"
                    },
                    {
                        loader: "css-loader",
                        options: {
                            alias: {
                                "../fonts/": '/esusgestorgeo/mapasaude/dist/fonts/'
                            }
                        }
                    }

                ]
            },

            {
                test: /\.styl$/,
                loader: 'style-loader!css-loader!stylus-loader'
            },
            {
                test: /\.(scss)$/,
                use: [{
                    loader: 'style-loader', // inject CSS to page
                }, {
                    loader: 'css-loader', // translates CSS into CommonJS modules
                }, {
                    loader: 'postcss-loader', // Run post css actions
                    options: {
                        plugins: function() { // post css plugins, can be exported to postcss.config.js
                            return [
                                require('precss'),
                                require('autoprefixer')
                            ];
                        }
                    }
                }, {
                    loader: 'sass-loader' // compiles SASS to CSS
                }]
            },

            {
                test: /\.js$/,
                loader: 'ts-loader!babel-loader',
                exclude: /node_modules/,
                include: [resolve('src'), resolve('test')]
            },
            {
                test: /\.(png|jpg|gif|svg)$/,
                loader: 'file-loader',
                options: {
                    name: '[name].[ext]?[hash]',
                    outputPath: './dist/images/', // where the fonts will go
                    publicPath: '../' // override the default path
                }
            },
            {
                test: /\.(ttf|otf|eot|svg|woff(2)?)(\?[a-z0-9]+)?$/,
                use: [{
                    loader: 'file-loader',
                    options: {
                        name: '[name].[ext]',
                        outputPath: './dist/fonts/', // where the fonts will go
                        publicPath: '../' // override the default path
                    }
                }]
            },
        ]
    },


    resolve: {
        extensions: ['.js', '.vue', '.json', '.css'],
        modules: [path.resolve(__dirname, "src"), "node_modules"],
        alias: {
            'vue$': 'vue/dist/vue.common.js',
            // 'muse-components': path.resolve(__dirname, 'node_modules/muse-ui/src')
            'el': resolve('./src/elementos'),
            'cp': resolve('./src/componentes'),
            '@': resolve('./src'),
            '~': resolve('./src'),
        }
    },


    devServer: {
        port: 8888,
        historyApiFallback: false,
        noInfo: true,
        compress: true,
        hotOnly: true,
        https: true,
        // allowedHosts: ['localhost', 'local.sli.do', 'admin.local.sli.do'],
        // host: '0.0.0.0'


        // host: '192.168.0.15'
    },

    performance: {
        hints: false
    },
    devtool: 'source-map',

    plugins: [
        
        new webpack.EnvironmentPlugin({
            NODE_ENV: 'development', // use 'development' unless process.env.NODE_ENV is defined
            BACKEND_URL: '//192.168.0.15:666'
        })
    ]
}


if (process.env.NODE_ENV === 'production') {
    module.exports.devtool = 'source-map',
        // http://vue-loader.vuejs.org/en/workflow/production.html
    module.exports.plugins = (module.exports.plugins || []).concat([
        new webpack.DefinePlugin({
            'process.env': {
                NODE_ENV: '"production"'
            }
        }),
        
        // new BundleAnalyzerPlugin(),
        //  new webpack.optimize.DedupePlugin(),
         new LodashModuleReplacementPlugin(),
        new webpack.optimize.UglifyJsPlugin({
            sourceMap: true,
            mangle: true,
            compress: {
                warnings: false, // Suppress uglification warnings
                pure_getters: true,
                unsafe: true,
                unsafe_comps: true,
                screw_ie8: true
            },
            output: {
                comments: false,
            },
        }),
        new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/),
        new webpack.LoaderOptionsPlugin({
            minimize: true
        })
    ])
}