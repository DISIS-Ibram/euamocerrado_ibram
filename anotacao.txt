## Rodando o backend
# Antes de executar o backend deve ser instalado o MagicWand
PIP: pip install Wand
SO: sudo apt-get install libmagickwand-dev


## POSTGRESQL
# Fazer o restore do banco com usuário que não é autenticado para o banco
sudo -u postgres pg_restore --no-owner --no-comments --no-privileges --no-tablespaces -Fc -d euamocerrado ./db/euamocerrado.dump

# Fazer o restore do banco com usuário que é autenticado para o banco
pg_restore -U postgres -h localhost -Fc -d euamocerrado ./backup/euamocerrado.dump

# Instalar o banco postgresql o WSL2
sudo apt update
sudo apt upgrade
sudo apt install postgresql postgresql-contrib

# Iniciar o serviço
sudo service postgresql start

# Verificar se o serviço está rodando
sudo service postgresql status

# Acessar o shell do PostgreSQL
sudo -i -u postgres
psql

# Criar banco no postgresql
CREATE DATABASE meu_banco;
CREATE USER meu_usuario WITH ENCRYPTED PASSWORD 'minha_senha';
GRANT ALL PRIVILEGES ON DATABASE meu_banco TO meu_usuario;

## Configuração opcional do postgresql
# postgresql.conf
sudo nano /etc/postgresql/12/main/postgresql.conf
listen_addresses = '*'

# pg_hba.conf
sudo nano /etc/postgresql/12/main/pg_hba.conf
host    all             all             0.0.0.0/0               md5

# Reestart do serviço
sudo service postgresql restart




Acessar o banco
sudo -i -u postgres
psql
CREATE DATABASE euamocerrado;

# Dump do banco
sudo -i -u postgres
psql -d euamocerrado -f 'caminho_do_arquivo_dump.sql'

Erro gdal
sudo apt update
sudo apt install gdal-bin libgdal-dev

# Install ImageMagick on Debian/Ubuntu
sudo apt-get install libmagickwand-dev

# Suporte ao postgis
sudo apt-get install postgis postgresql-<versão>-postgis-<versão>
sudo apt-get install postgis postgresql-16-postgis-3
b. Habilitar a extensão PostGIS no banco de dados

Após instalar o PostGIS, você precisa ativá-lo no banco de dados. Conecte-se ao banco de dados PostgreSQL com o comando psql:

psql -h localhost -U postgres -d seu_banco_de_dados

Com usuário root
sudo -u postgres psql -d euamocerrado -f especies.sql

# Criar extensão para o postgis
psql -U postgres -d euamocerrado
CREATE EXTENSION postgis;
Veriifcar se deu certo
SELECT PostGIS_Full_Version();


sudo -i -u postgres
psql
\c seu_banco_de_dados

Então, dentro do psql, execute o seguinte comando para habilitar a extensão:

CREATE EXTENSION postgis;

Se necessário, você também pode ativar outras extensões relacionadas ao PostGIS, como:

CREATE EXTENSION postgis_topology;

2. Verificar a instalação

Para verificar se o PostGIS foi instalado corretamente, execute:

SELECT PostGIS_Version();

3. Reiniciar o servidor PostgreSQL

Após a instalação da extensão, reinicie o servidor PostgreSQL para garantir que as alterações sejam aplicadas corretamente:

sudo service postgresql restart

# Rodar o backend
docker build -t backend .


Adicionar chave primaria nas tabelas
\d+ tabela_nome
Ver se tem a chave primária
ALTER TABLE trilha_atrativotrilha ADD PRIMARY KEY (id);


## Executar o docker
# Criar a imagem
docker build -t nome-da-imagem .

# Rodar a imagem em um container
docker run nome-da-imagem
docker run -d -p 8000:8000 nome-da-imagem

# Com terminal
docker run -it nome-da-imagem /bin/bash
docker run -it nome-da-imagem /bin/sh

# DICA se quiser manter arquivos e mudanças temporariamente, você pode usar:
docker run -it --name meu-container nome-da-imagem /bin/bash
Depois você pode reentrar com:
docker start -ai meu-container




# Fazer um dump do banco
sudo -u postgres pg_dump -d euamocerrado -Fc -f ./db-backup/euamocerrado_03_03_2025.dump



## DOCKER-COMPOSE
docker-compose up --build

## Fazer o backup do banco na imagem db do projeto
# Restaurar o banco dentro do container
# Depois que o banco estiver rodando, execute:
docker exec -it postgres_euamocerrado bash
pg_restore -U postgres -d euamocerrado /backup/euamocerrado.dump
exit

## Ajustar settings.py do Django
# Use DATABASE_URL ou configure assim:
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'euamocerrado',
        'USER': 'postgres',
        'PASSWORD': '123456',
        'HOST': 'db',
        'PORT': '5432',
    }
}

