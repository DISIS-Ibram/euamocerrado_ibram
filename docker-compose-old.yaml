services:

  # INGRESS DO EUAMOCERRADO
  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  
  nginx:
      container_name: eac-ngix
      build: 
        context: nginx
        dockerfile: Dockerfile
      restart: always
      ports:
        - "${NGIX_PORT}:80"
        # - "443:443"
      depends_on:
        - backend
        - admin
        - hassura
      env_file:
        - ./.env
      volumes:
        - ./nginx/nginx-prod.tmpl:/etc/nginx/nginx-prod.tmpl
        - ./nginx/run_nginx.sh:/etc/nginx/run_nginx.sh
        - ./letsencrypt/data/certbot/conf:/etc/letsencrypt
        - ./letsencrypt/data/certbot/www:/var/www/certbot
        - "./data/nginx/cache:/etc/nginx/cache"
        - ./dist:/dist
        - ./admin/public:/dist/admin
        
      entrypoint: /etc/nginx/run_nginx.sh

  

  # SERVICOS

  #  frontend so cria o dist em /dist/frontend que o nginx vai servir
  frontend:
    container_name: eac-frontend
    build:
      context: ./frontend/
      dockerfile: Dockerfile
      # target: node
    restart: always
    env_file:
      - ./.env
    working_dir: /app
    command: bash -c 'cp -R /app/dist/* /dist/frontend/' # && rm -f yarn.lock && yarn && npx vue-cli-service serve'
    entrypoint: ''

  #  frontend da Administração. Por problema de versão, o webpack-dev-server que fornece o servico.
  admin:
    container_name: eac-admin
    build:
      context: ./admin/
      dockerfile: Dockerfile
      target: node
    #restart: always
    env_file:
      - ./.env
    ports:
      - "9898:8080"
    working_dir: /app
    command: sh -c 'yarn && yarn add webpack-dev-server@2.4.5 && npm run start'

  # BANCO DE DADOS - POSTGRES/POSTGIS
  db:
      container_name: eac-postgres
      image: mdillon/postgis
      restart: always
      env_file:
      - ./.env
      volumes:
      - ./data/pgdata:/var/lib/postgresql/data
      - ./db-backup:/db-backup
      ports:
      - "${POSTGRES_PORT}:5432"
      
  # DJANGO-LOGICA BACKEND
  backend:
    depends_on:
      - db
    container_name: eac-backend
    build: ./backend
    restart: always
    env_file:
      - ./.env
    ports:
      - "${BACKEND_PORT}:80"
    volumes:
    - ./data/media/:/app/media/
    # - ./backend:/app
    #  command: bash -c 'while !</dev/tcp/db/5432; do sleep 5; done; python manage.py runserver 0.0.0.0:8686'
    command: ["/app/start.sh", "db:5432", "python", "manage.py", "runserver", "0.0.0.0:80"]  
    #  command: python manage.py runserver 0.0.0.0:80

  #GRAPH-QL que serve os dados para o frontend
  hassura:
    image: hasura/graphql-engine:v2.0.3
    container_name: eac-hassura
    ports:
    - "8383:80"
    depends_on:
    - "db"
    restart: always
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:r00t05@db:5432/euamoocerrado
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      # Accepts from all domain
      HASURA_GRAPHQL_CORS_DOMAIN: "*"
      HASURA_GRAPHQL_DISABLE_CORS: 'true'
      HASURA_GRAPHQL_SERVER_HOST: "*"
      ## uncomment next line to set an admin secret
      HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      HASURA_GRAPHQL_SERVER_PORT: 80
